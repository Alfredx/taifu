from pptx import Presentation
from structs import Node
from typing import Generator, Tuple, Any


class SlidesGenerator(object):
    def __init__(self, node: Node) -> None:
        self.root = node
        self.prs = Presentation()

    def generate(self) -> None:
        self._gen_cover()
        self._gen_outline()
        for node, depth in self._walk_through_node(self.root):
            if node.node_type == "concept":
                self._gen_detail(node)
    
    def save(self, path: str="") -> None:
        filepath = f"{self.root.name.lower().replace(' ', '_')}.pptx" if not path else path
        self.prs.save(filepath)
        return filepath


    def _gen_cover(self) -> None:
        title_slide_layout = self.prs.slide_layouts[0]
        slide = self.prs.slides.add_slide(title_slide_layout)
        title = slide.shapes.title
        subtitle = slide.placeholders[1]

        title.text = self.root.name
        subtitle.text = "Generated by 太傅"

    def _gen_outline(self) -> None:
        bullet_slide_layout = self.prs.slide_layouts[1]
        slide = self.prs.slides.add_slide(bullet_slide_layout)
        shapes = slide.shapes
        title_shape = shapes.title
        title_shape.text = "Outline"
        body_shape = shapes.placeholders[1]
        tf = None
        for node, depth in self._walk_through_node(self.root):
            if not tf:
                tf = body_shape.text_frame
                tf.text = node.display_name
                continue
            p = tf.add_paragraph()
            p.text = node.display_name
            p.level = depth
                

    def _gen_detail(self, node: Node) -> None:
        bullet_slide_layout = self.prs.slide_layouts[1]
        slide = self.prs.slides.add_slide(bullet_slide_layout)
        shapes = slide.shapes
        title_shape = shapes.title
        title_shape.text = node.name
        body_shape = shapes.placeholders[1]
        tf = None
        for child in node.children:
            if not tf:
                tf = body_shape.text_frame
                tf.text = child.display_name
                continue
            p = tf.add_paragraph()
            p.text = child.display_name
            p.level = 1

    def _walk_through_node(self, node: Node, depth=0) -> Generator[Tuple[Node, int], Any, Any]:
        """深度优先遍历"""
        if not node.children:
            return
        for child in node.children:
            yield (child, depth)
            for t in self._walk_through_node(child, depth+1):
                yield t
